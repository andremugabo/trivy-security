name: Node.js CI/CD Security Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/unisecure-trivy
  TRIVY_SEVERITY: 'CRITICAL,HIGH'
  NODE_VERSION: '18'
  TRIVY_VERSION: '0.65.0'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget -y
          wget https://github.com/aquasecurity/trivy/releases/download/v${{ env.TRIVY_VERSION }}/trivy_${{ env.TRIVY_VERSION }}_Linux-64bit.deb
          sudo dpkg -i trivy_${{ env.TRIVY_VERSION }}_Linux-64bit.deb

      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-db-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-trivy-db-

      - name: Scan base image
        run: |
          trivy image --cache-dir ~/.cache/trivy \
            --severity ${{ env.TRIVY_SEVERITY }} \
            --ignore-unfixed \
            --format sarif \
            --output trivy-results.json \
            node:${{ env.NODE_VERSION }}-alpine
          echo "TRIVY_EXIT_CODE=$?" >> $GITHUB_ENV

      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.json
        if: always()

      - name: Fail if vulnerabilities found
        if: env.TRIVY_EXIT_CODE != '0'
        run: exit 1

  dependency-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Audit npm dependencies
        run: |
          npm ci --omit=dev
          npm audit --audit-level=high --production
        continue-on-error: false

  build-test:
    needs: [security-scan, dependency-audit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - run: npm ci --omit=dev
      - run: npm test -- --watchAll=false
      - run: npm run build --if-present

  docker-scan:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install wget -y
          wget https://github.com/aquasecurity/trivy/releases/download/v${{ env.TRIVY_VERSION }}/trivy_${{ env.TRIVY_VERSION }}_Linux-64bit.deb
          sudo dpkg -i trivy_${{ env.TRIVY_VERSION }}_Linux-64bit.deb

      - name: Cache Trivy DB
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-db-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-trivy-db-

      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_NAME }} .

      - name: Scan built image
        run: |
          trivy image --cache-dir ~/.cache/trivy \
            --severity ${{ env.TRIVY_SEVERITY }} \
            --ignore-unfixed \
            --format table \
            --vuln-type os,library \
            ${{ env.IMAGE_NAME }}
          echo "TRIVY_EXIT_CODE=$?" >> $GITHUB_ENV

      - name: Fail if vulnerabilities found
        if: env.TRIVY_EXIT_CODE != '0'
        run: exit 1

  docker-push:
    needs: docker-scan
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.created=${{ github.event.repository.updated_at }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          sbom: true
          provenance: true

  deploy:
    needs: docker-push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Verify deployment environment
        run: |
          kubectl version --client
          kubectl cluster-info
        env:
          KUBECONFIG: ${{ secrets.KUBE_CONFIG }}

      - name: Deploy to production
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl rollout status deployment/unisecure-trivy
        env:
          KUBECONFIG: ${{ secrets.KUBE_CONFIG }}
