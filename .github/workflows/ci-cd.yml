name: Node.js CI/CD Security Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/your-app
  TRIVY_SEVERITY: 'CRITICAL,HIGH'
  NODE_VERSION: '18'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy on base image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'node:${{ env.NODE_VERSION }}-alpine'
          format: 'sarif'
          exit-code: '1'
          severity: ${{ env.TRIVY_SEVERITY }}
          ignore-unfixed: true
          output: 'trivy-results.json'
          
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.json'

  dependency-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Audit npm dependencies
        run: npm audit --audit-level=high
        continue-on-error: false

  build-test:
    needs: [security-scan, dependency-audit]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - run: npm ci --omit=dev
      - run: npm test -- --watchAll=false
      - run: npm run build --if-present

  docker-scan:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_NAME }} .
        
      - name: Scan built image with Trivy
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.IMAGE_NAME }}
          format: 'table'
          exit-code: '1'
          severity: ${{ env.TRIVY_SEVERITY }}
          ignore-unfixed: true
          vuln-type: 'os,library'

  docker-push:
    needs: docker-scan
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          sbom: true

  deploy:
    needs: docker-push
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Verify deployment environment
        run: kubectl version --client
        env:
          KUBECONFIG: ${{ secrets.KUBE_CONFIG }}
          
      - name: Deploy to production
        run: |
          kubectl apply -f k8s/deployment.yaml
          kubectl rollout status deployment/your-app